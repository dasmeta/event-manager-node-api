/* tslint:disable */
/* eslint-disable */
/**
 * Tutor
 * Event Manager Backend service is based on Strapi v3 JS framework.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: aram@dasmeta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EventsubscriptionsCleananomalyBody } from '../models';
import { EventsubscriptionsMarkasfailBody } from '../models';
import { EventsubscriptionsMarkassuccessBody } from '../models';
import { EventsubscriptionsMarkmissingaserrorBody } from '../models';
import { EventsubscriptionsMarksingleassuccessBody } from '../models';
import { EventsubscriptionsPopulatemissingBody } from '../models';
import { EventsubscriptionsRegisterBody } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { NewEventSubscription } from '../models';
/**
 * EventSubscriptionApi - axios parameter creator
 * @export
 */
export const EventSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clean anomaly records
         * @param {EventsubscriptionsCleananomalyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsCleanAnomalyPost: async (body: EventsubscriptionsCleananomalyBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsCleanAnomalyPost.');
            }
            const localVarPath = `/event-subscriptions/clean-anomaly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/event-subscriptions/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get events with errors
         * @param {string} topic Name of the topic
         * @param {string} subscription Name of the subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsErrorsGet: async (topic: string, subscription: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topic' is not null or undefined
            if (topic === null || topic === undefined) {
                throw new RequiredError('topic','Required parameter topic was null or undefined when calling eventSubscriptionsErrorsGet.');
            }
            // verify required parameter 'subscription' is not null or undefined
            if (subscription === null || subscription === undefined) {
                throw new RequiredError('subscription','Required parameter subscription was null or undefined when calling eventSubscriptionsErrorsGet.');
            }
            const localVarPath = `/event-subscriptions/errors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }

            if (subscription !== undefined) {
                localVarQueryParameter['subscription'] = subscription;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array<string>} [_in] Get records that matches any value in the array of values
         * @param {Array<string>} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsGet: async (limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/event-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (eq !== undefined) {
                localVarQueryParameter['_eq'] = eq;
            }

            if (ne !== undefined) {
                localVarQueryParameter['_ne'] = ne;
            }

            if (lt !== undefined) {
                localVarQueryParameter['_lt'] = lt;
            }

            if (lte !== undefined) {
                localVarQueryParameter['_lte'] = lte;
            }

            if (gt !== undefined) {
                localVarQueryParameter['_gt'] = gt;
            }

            if (gte !== undefined) {
                localVarQueryParameter['_gte'] = gte;
            }

            if (contains !== undefined) {
                localVarQueryParameter['_contains'] = contains;
            }

            if (containss !== undefined) {
                localVarQueryParameter['_containss'] = containss;
            }

            if (_in) {
                localVarQueryParameter['_in'] = _in;
            }

            if (nin) {
                localVarQueryParameter['_nin'] = nin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a record
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventSubscriptionsIdDelete.');
            }
            const localVarPath = `/event-subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventSubscriptionsIdGet.');
            }
            const localVarPath = `/event-subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a record
         * @param {NewEventSubscription} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsIdPut: async (body: NewEventSubscription, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling eventSubscriptionsIdPut.');
            }
            const localVarPath = `/event-subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark events as fail
         * @param {EventsubscriptionsMarkasfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsMarkAsFailPost: async (body: EventsubscriptionsMarkasfailBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsMarkAsFailPost.');
            }
            const localVarPath = `/event-subscriptions/mark-as-fail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark events as success
         * @param {EventsubscriptionsMarkassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsMarkAsSuccessPost: async (body: EventsubscriptionsMarkassuccessBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsMarkAsSuccessPost.');
            }
            const localVarPath = `/event-subscriptions/mark-as-success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark missing events as error
         * @param {EventsubscriptionsMarkmissingaserrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsMarkMissingAsErrorPost: async (body: EventsubscriptionsMarkmissingaserrorBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsMarkMissingAsErrorPost.');
            }
            const localVarPath = `/event-subscriptions/mark-missing-as-error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark single event as success
         * @param {EventsubscriptionsMarksingleassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsMarkSingleAsSuccessPost: async (body: EventsubscriptionsMarksingleassuccessBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsMarkSingleAsSuccessPost.');
            }
            const localVarPath = `/event-subscriptions/mark-single-as-success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Change missing records status
         * @param {EventsubscriptionsPopulatemissingBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsPopulateMissingPost: async (body: EventsubscriptionsPopulatemissingBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsPopulateMissingPost.');
            }
            const localVarPath = `/event-subscriptions/populate-missing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new record
         * @param {NewEventSubscription} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsPost: async (body: NewEventSubscription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsPost.');
            }
            const localVarPath = `/event-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Register subscription
         * @param {EventsubscriptionsRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventSubscriptionsRegisterPost: async (body: EventsubscriptionsRegisterBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventSubscriptionsRegisterPost.');
            }
            const localVarPath = `/event-subscriptions/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventSubscriptionApi - functional programming interface
 * @export
 */
export const EventSubscriptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Clean anomaly records
         * @param {EventsubscriptionsCleananomalyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsCleanAnomalyPost(body: EventsubscriptionsCleananomalyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsCleanAnomalyPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsCountGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get events with errors
         * @param {string} topic Name of the topic
         * @param {string} subscription Name of the subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsErrorsGet(topic: string, subscription: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2001>>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsErrorsGet(topic, subscription, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array<string>} [_in] Get records that matches any value in the array of values
         * @param {Array<string>} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsGet(limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a record
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<number>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a record
         * @param {NewEventSubscription} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsIdPut(body: NewEventSubscription, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Mark events as fail
         * @param {EventsubscriptionsMarkasfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkAsFailPost(body: EventsubscriptionsMarkasfailBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsMarkAsFailPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Mark events as success
         * @param {EventsubscriptionsMarkassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkAsSuccessPost(body: EventsubscriptionsMarkassuccessBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsMarkAsSuccessPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Mark missing events as error
         * @param {EventsubscriptionsMarkmissingaserrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkMissingAsErrorPost(body: EventsubscriptionsMarkmissingaserrorBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsMarkMissingAsErrorPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Mark single event as success
         * @param {EventsubscriptionsMarksingleassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkSingleAsSuccessPost(body: EventsubscriptionsMarksingleassuccessBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsMarkSingleAsSuccessPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Change missing records status
         * @param {EventsubscriptionsPopulatemissingBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsPopulateMissingPost(body: EventsubscriptionsPopulatemissingBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsPopulateMissingPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new record
         * @param {NewEventSubscription} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsPost(body: NewEventSubscription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register subscription
         * @param {EventsubscriptionsRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsRegisterPost(body: EventsubscriptionsRegisterBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EventSubscriptionApiAxiosParamCreator(configuration).eventSubscriptionsRegisterPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventSubscriptionApi - factory interface
 * @export
 */
export const EventSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Clean anomaly records
         * @param {EventsubscriptionsCleananomalyBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsCleanAnomalyPost(body: EventsubscriptionsCleananomalyBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsCleanAnomalyPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsCountGet(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get events with errors
         * @param {string} topic Name of the topic
         * @param {string} subscription Name of the subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsErrorsGet(topic: string, subscription: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2001>>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsErrorsGet(topic, subscription, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array<string>} [_in] Get records that matches any value in the array of values
         * @param {Array<string>} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsGet(limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a record
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<number>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a record
         * @param {NewEventSubscription} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsIdPut(body: NewEventSubscription, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark events as fail
         * @param {EventsubscriptionsMarkasfailBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkAsFailPost(body: EventsubscriptionsMarkasfailBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsMarkAsFailPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark events as success
         * @param {EventsubscriptionsMarkassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkAsSuccessPost(body: EventsubscriptionsMarkassuccessBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsMarkAsSuccessPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark missing events as error
         * @param {EventsubscriptionsMarkmissingaserrorBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkMissingAsErrorPost(body: EventsubscriptionsMarkmissingaserrorBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsMarkMissingAsErrorPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark single event as success
         * @param {EventsubscriptionsMarksingleassuccessBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsMarkSingleAsSuccessPost(body: EventsubscriptionsMarksingleassuccessBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsMarkSingleAsSuccessPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Change missing records status
         * @param {EventsubscriptionsPopulatemissingBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsPopulateMissingPost(body: EventsubscriptionsPopulatemissingBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsPopulateMissingPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new record
         * @param {NewEventSubscription} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsPost(body: NewEventSubscription, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Register subscription
         * @param {EventsubscriptionsRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventSubscriptionsRegisterPost(body: EventsubscriptionsRegisterBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EventSubscriptionApiFp(configuration).eventSubscriptionsRegisterPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventSubscriptionApi - object-oriented interface
 * @export
 * @class EventSubscriptionApi
 * @extends {BaseAPI}
 */
export class EventSubscriptionApi extends BaseAPI {
    /**
     * Clean anomaly records
     * @param {EventsubscriptionsCleananomalyBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsCleanAnomalyPost(body: EventsubscriptionsCleananomalyBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsCleanAnomalyPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsCountGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsCountGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get events with errors
     * @param {string} topic Name of the topic
     * @param {string} subscription Name of the subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsErrorsGet(topic: string, subscription: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse2001>>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsErrorsGet(topic, subscription, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {string} [eq] Get entries that matches exactly your input
     * @param {string} [ne] Get records that are not equals to something
     * @param {string} [lt] Get record that are lower than a value
     * @param {string} [lte] Get records that are lower than or equal to a value
     * @param {string} [gt] Get records that are greater than a value
     * @param {string} [gte] Get records that are greater than  or equal a value
     * @param {string} [contains] Get records that contains a value
     * @param {string} [containss] Get records that contains (case sensitive) a value
     * @param {Array<string>} [_in] Get records that matches any value in the array of values
     * @param {Array<string>} [nin] Get records that doesn&#x27;t match any value in the array of values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsGet(limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a record
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<number>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a record
     * @param {NewEventSubscription} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsIdPut(body: NewEventSubscription, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Mark events as fail
     * @param {EventsubscriptionsMarkasfailBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsMarkAsFailPost(body: EventsubscriptionsMarkasfailBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsMarkAsFailPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Mark events as success
     * @param {EventsubscriptionsMarkassuccessBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsMarkAsSuccessPost(body: EventsubscriptionsMarkassuccessBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsMarkAsSuccessPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Mark missing events as error
     * @param {EventsubscriptionsMarkmissingaserrorBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsMarkMissingAsErrorPost(body: EventsubscriptionsMarkmissingaserrorBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsMarkMissingAsErrorPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Mark single event as success
     * @param {EventsubscriptionsMarksingleassuccessBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsMarkSingleAsSuccessPost(body: EventsubscriptionsMarksingleassuccessBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsMarkSingleAsSuccessPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Change missing records status
     * @param {EventsubscriptionsPopulatemissingBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsPopulateMissingPost(body: EventsubscriptionsPopulatemissingBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsPopulateMissingPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new record
     * @param {NewEventSubscription} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsPost(body: NewEventSubscription, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register subscription
     * @param {EventsubscriptionsRegisterBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public async eventSubscriptionsRegisterPost(body: EventsubscriptionsRegisterBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EventSubscriptionApiFp(this.configuration).eventSubscriptionsRegisterPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
